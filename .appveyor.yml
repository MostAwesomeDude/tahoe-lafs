# adapted from https://packaging.python.org/en/latest/appveyor/

environment:

  matrix:

    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    #- PYTHON: "C:\\Python27"
    - PYTHON: "C:\\Python27-x64"
    #  DISTUTILS_USE_SDK: "1"
    #  TOX_TESTENV_PASSENV: "DISTUTILS_USE_SDK INCLUDE LIB"

install:
  - |
    %PYTHON%\python.exe -m pip install "hg+https://bitbucket.org/hpk42/tox#egg=tox"

#%PYTHON%\python.exe -m pip install tox
# tox-2.3.1 has a windows bug (#314), fixed in hg but not yet released

build: off

test_script:
  # Put your test command here.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python evrsion you want to use on PATH.
  - |
    dir .
    dir %PYTHON%\Scripts
    %PYTHON%\Scripts\tox.exe -e py

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - |
    %PYTHON%\python.exe setup.py bdist_wheel

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

  # grab the tox logs to diagnose failures
  - path: .\.tox\py27\log

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.

on_failure:
  - appveyor AddMessage "hello from on_failure"
  - dir .
  - appveyor PushArtifact .tox\py27\log\py27-0.log
  
